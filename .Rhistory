pv = rep(NA, n)
for (i in 11:n){
dist = rnorm(i,0,std)
pv[i] = replicate(10^6,t.test(dist, mu = 0)$p.value)
}
set.seed(1)
std = 30
n = 100
pv = rep(NA, n)
for (i in 1:n){
dist = rnorm(i,0,std)
pv[i] = t.test(dist, mu = 0)$p.value
}
set.seed(1)
std = 30
n = 100
pv = rep(NA, n)
for (i in 2:n){
dist = rnorm(i,0,std)
pv[i] = t.test(dist, mu = 0)$p.value
}
mean(pv < 0.05)
set.seed(1)
std = 30
n = 1000
pv = rep(NA, n)
for (i in 2:n){
dist = rnorm(i,0,std)
pv[i] = t.test(dist, mu = 0)$p.value
}
mean(pv < 0.05)
t.test(dist, mu = 0)$p.value
set.seed(1)
std = 30
n = 1000
pv = rep(NA, n)
for (i in 2:n){
dist = rnorm(i,0,std)
pv[i] = t.test(dist, mu = 0)$p.value
}
mean(abs(pv) > qt(0.975))
set.seed(1)
delta = 5
sd = 30
n = 2*((((sd)^2)*(1.28+1.96)^2)/(delta^2))
n
set.seed(1)
delta = 5
sd = 30
n = 2*((((sd)^2)*(1.28+1.96)^2)/(delta^2))
n
n = 756
reps = 10000
z = rep(NA, reps)
for (i in 1:reps){
x = rnorm(n, mean = 0, sd = 30)
z[i] = (mean(x)-5)/(sd(x)/sqrt(n))
}
critical_value =abs(qt(0.025,n-1))
mean(abs(z) > critical_value)
sd=30
pa=0.1
pb=0.15
delta=0.05
n=(((pa*(1-pa))+(pb*(1-pb))) * ((1.28+1.96)^2))/(delta^2)
n
set.seed(9)
n = 914
reps = 10000
z = rep(NA, reps) for (i in 1:reps){
set.seed(9)
n = 914
reps = 10000
z = rep(NA, reps)
for (i in 1:reps){
xa = rnorm(n, mean = n*0.1, sd = sqrt(n*0.1*0.9))
xb = rnorm(n, mean = n*0.15, sd = sqrt(n*0.15*0.85)) sa = sd(xa)
set.seed(9)
n = 914
reps = 10000
z = rep(NA, reps)
for (i in 1:reps){
xa = rnorm(n, mean = n*0.1, sd = sqrt(n*0.1*0.9))
xb = rnorm(n, mean = n*0.15, sd = sqrt(n*0.15*0.85))
sa = sd(xa)
sb = sd(xb)
z[i] = (mean(xa)-mean(xb))/sqrt((sa*sa/n) + (sb*sb/n))
}
critical_value = 1.96
mean(abs(z) > critical_value)
set.seed(5)
wine <- read.csv("Documents/Applied Stats/wine.csv")
s <- summary(aov(quality ~ factor(alc) + factor(ph), data = wine))
s
fit <- summary(lm(quality ~ alc + ph, data = wine))
fit
fit <- summary(lm(quality ~ alc + ph, data = wine))$coef
fit
s <- summary(aov(quality ~ factor(alc) * factor(ph), data = wine))
s
n = 150
mean.A <- 500
mean.B <- mean.A - 80
reps <- 5000
z <- rep(NA, reps)
for (i in 1:reps){
n1 = rnorm(n, mean.A, sd = mean.A/2)
n2 = rnorm(n, mean.B, sd = mean.B/2)
z[i] = (mean(n1)-mean(n2))/(sqrt((var(n1)/n)+(var(n2)/n)))
}
critical.val <- qnorm(0.975)
mean(abs(z)> critical.val)
power = pnorm(-1.96 + (delta/sqrt((2*(sd^2))/n)))
set.seed(1)
n = 100
reps <- 10000
mu1 = 500
mu2 = 460
mu3 = 420
sd1 = mu1/2
sd2 = mu2/2
sd3 = mu3/2
p.values = rep(NA, reps)
alpha <- 0.05
for(i in 1:reps){
n1 <- rnorm(n, mu1, sd1)
n2 <- rnorm(n, mu2, sd2)
n3 <- rnorm(n, mu3, sd3)
df <- as.data.frame(matrix(nrow = 300, ncol = 2))
colnames(df) <- c("coffee_mg", "reaction_time")
df[1:100, 1] <- 0
df[1:100, 2] <- n1
df[101:200, 1] <- 50
df[101:200, 2] <- n2
df[201:300, 1] <- 100
df[201:300, 2] <- n3
lm_fit <- summary(lm(reaction_time ~ coffee_mg, data = df))
p.values[i] = pf(lm_fit$fstatistic[1], lm_fit$fstatistic[2], lm_fit$fstatistic[3], lower.tail = FALSE)
}
mean(p.values < alpha)
install.packages("sandwich")
fev <- read.csv("Downloads/fev.csv")
fit <- lm(fev ~ height, data = fev)
View(fev)
fit <- lm(fev ~ ht, data = fev)
fit
# 2. Use least-squares to fit a linear regression model (Model 2) with FEV as response variable and both age and height in the model as predictor variables. Interpret the coefficient of height in this model.
fit <- lm(fev ~ ht, age, data = fev)
fit
# 2. Use least-squares to fit a linear regression model (Model 2) with FEV as response variable and both age and height in the model as predictor variables. Interpret the coefficient of height in this model.
fit <- lm(fev ~ ht + age, data = fev)
fit
summary(fit)
# 4. What is the correlation between age and height? Why does this matter?
cor(fev$age, fev$ht)
fit_m1 <- lm(fev ~ ht, data = fev)
summary(fit_m1)
fit_m2 <- lm(fev ~ ht + age, data = fev)
summary(fit_m2)
# 5. Check the Xâ€™X-inverse matrix for the model in Q6. Is the off-diagonal element corresponding to age and height equal to 0 or not? Why does this matter?
fev <- read.csv("Downloads/fev.csv")
fit_m1 <- lm(fev ~ ht, data = fev)
summary(fit_m1)
fit_m2 <- lm(fev ~ ht + age, data = fev)
summary(fit_m2)
View(fev)
fit_m3 <- lm(fev ~ ht + age + male + smoke , data = fev)
summary(fit_m3)
plot(summary(fit_m3))
plot(summary(fit_m3))
plot(fit_m3)
# 13. Assess the assumption of normal errors for Model 3.  Provide a residual plot to justify your answer.. Do you see evidence for non-normality?
plot(fit_m3)
summary(fit_m3)
fit_m2$coefficients
beta <- fit_m1$coefficients
fit_m2$coefficients
summary(fit_m2)$coefficients
summary(fit_m2)$coefficients[2,1]
z <- beta/sebeta
sebeta <- summary(fit_m2)$coefficients[2,2]
z <- beta/sebeta
z
summary(fit_m2)$coefficients[2,1]
summary(fit_m2)$coefficients[2,2]
summary(fit_m1)$coefficients[2,1]
summary(fit_m1)$coefficients[2,2]
beta <- summary(fit_m1)$coefficients[2,1]
sebeta <- summary(fit_m1)$coefficients[2,2]
z <- beta/sebeta
z
2*(1-pnorm(abs(z)))
n <- nrow(fev)
beta <- summary(fit_m2)$coefficients[2,1]
sebeta <- summary(fit_m2)$coefficients[2,2]
z <- beta/sebeta
2*(1-pnorm(abs(z)))
z
summary(fit_m2)$coefficients
cor(fev$age, fev$ht)
f <- read.csv("Downloads/fev.csv")
fit_m2 <- lm(fev ~ ht + age, data = fev)
summary(fit_m2)
X=cbind(rep(1,n),f$age,f$smoke)
p=ncol(X)
beta=solve(t(X) %*% X) %*% t(X) %*% Y
X=cbind(rep(1,n),f$age,f$smoke)
Y=f$fev
p=ncol(X)
beta=solve(t(X) %*% X) %*% t(X) %*% Y
muhat= X %*% beta
sigmasq=sum((Y - muhat)^2)/(n-p)
covbeta=sigmasq * solve(t(X) %*% X)
sebeta=sqrt(diag(covbeta))
print(covbeta)
X=cbind(rep(1,n),f$age,f$ht)
Y=f$fev
p=ncol(X)
res=solve(t(X) %*% X)
print(res)
n = nrow(fev)
X=cbind(rep(1,n),f$age,f$ht)
Y=f$fev
p=ncol(X)
res=solve(t(X) %*% X)
print(res)
fev <- read.csv("Downloads/fev.csv")
fit_m1 <- lm(fev ~ ht, data = fev)
summary(fit_m1)
fev <- read.csv("Downloads/fev.csv")
fit_m1 <- lm(fev ~ ht, data = fev)
summary(fit_m1)
f <- read.csv("Downloads/fev.csv")
fit_m2 <- lm(fev ~ ht + age, data = fev)
summary(fit_m2)
cor(fev$age, fev$ht)
n = nrow(fev)
X=cbind(rep(1,n),f$age,f$ht)
Y=f$fev
p=ncol(X)
res=solve(t(X) %*% X)
print(res)
n <- nrow(fev)
beta <- summary(fit_m1)$coefficients[2,1]
sebeta <- summary(fit_m1)$coefficients[2,2]
z <- beta/sebeta
2*(1-pnorm(abs(z)))
n <- nrow(fev)
beta <- summary(fit_m2)$coefficients[2,1]
sebeta <- summary(fit_m2)$coefficients[2,2]
z <- beta/sebeta
2*(1-pnorm(abs(z)))
n <- nrow(fev)
beta <- summary(fit_m2)$coefficients[2,1]
sebeta <- summary(fit_m2)$coefficients[2,2]
z <- beta/sebeta
print(z)
2*(1-pnorm(abs(z)))
n <- nrow(fev)
beta <- summary(fit_m1)$coefficients[2,1]
sebeta <- summary(fit_m1)$coefficients[2,2]
z <- beta/sebeta
print(z)
2*(1-pnorm(abs(z)))
fit_m3 <- lm(fev ~ ht + age + male + smoke , data = fev)
summary(fit_m3)
# 13. Assess the assumption of normal errors for Model 3.  Provide a residual plot to justify your answer. Do you see evidence for non-normality?
plot(fit_m3)
# 14. Do you think the degree of non-normality of the errors is severe enough to invalidate statistical inferences based on Model 3?
#Nope!
# 13. Assess the assumption of normal errors for Model 3.  Provide a residual plot to justify your answer. Do you see evidence for non-normality?
plot(fit_m3)[2]
qqnorm(summary(fit_m3)$residuals)
qqline(summary(fit_m3)$residuals)
qqnorm(summary(fit_m3)$residuals)
qqline(summary(fit_m3)$residuals)
scatter.smooth(fit_m3$fitted.values,fit_m3$residuals,cex=0.5,lpars =list(col = "red", lwd = 1, lty = 2))
View(fev)
summary(fit_m1)$coefficients[2,1]
summary(fit_m1)
n <- nrow(fev)
beta <- summary(fit_m1)$coefficients[2,1]
sebeta <- summary(fit_m1)$coefficients[2,2]
z <- beta/sebeta
print("The test statistic is:")
print(z)
print("The p-value is:")
2*(1-pnorm(abs(z)))
n <- nrow(fev)
beta <- summary(fit_m2)$coefficients[2,1]
sebeta <- summary(fit_m2)$coefficients[2,2]
z <- beta/sebeta
print("The test statistic is:")
print(z)
print("The p-value is:")
2*(1-pnorm(abs(z)))
setwd("~/Documents/Applied Stats")
vote <- read.csv("vote.csv")
View(vote)
fit1 <- lm(vote ~ sex, data = vote)
fit1_sum <- summary(fit1)
fit1_sum
plot(fit1_sum)
plot(fit1_sum)
plot(fit1)
fit1 <- lm(vote ~ sex, data = vote, family = binary)
vote <- read.csv("vote.csv")
fit1 <- glm(vote ~ sex, data = vote, family = "binomial")
fit1_sum <- summary(fit1)
fit1_sum
plot(fit1)
exp(-0.2481)
fit1 <- glm(vote ~ sex, data = vote, family = "poisson")
fit1_sum <- summary(fit1)
fit1_sum
exp(0.17238)
vote <- read.csv("vote.csv")
fit1 <- glm(vote ~ sex, data = vote, family = "binomial")
fit1_sum <- summary(fit1)
fit1_sum
exp(0.331)
fit2 <- lm(income ~ education, data = vote)
fit2_sum <- summary(fit2)
fit2_sum
plot(fit2)
fit2 <- glm(income ~ education, data = vote)
fit2_sum <- summary(fit2)
fit2_sum
cor(vote$income, vote$education)
cor(vote$income, vote$education)
exp(-0.7993)
exp(-0.7993)
fit2 <- glm(log(income) ~ education, data = vote)
fit2_sum <- summary(fit2)
fit2_sum
exp(-0.02648)
fit2 <- glm(income ~ education, data = vote)
fit2_sum <- summary(fit2)
fit2_sum
fit2 <- glm(income ~ education, data = vote, family = poisson)
fit2_sum <- summary(fit2)
fit2_sum
exp(-0.014793)
library(MetaboAnalystR)
mSet<-InitDataObjects("specbin", "stat", FALSE)
mSet<-Read.TextData(mSet, "data_processed.csv", "rowu", "disc");
mSet<-SanityCheckData(mSet)
library(MetaboAnalystR)
mSet<-InitDataObjects("specbin", "stat", FALSE)
mSet<-Read.TextData(mSet, "data_processed.csv", "rowu", "disc");
mSet<-SanityCheckData(mSet)
mSet<-RemoveMissingPercent(mSet, percent=0.5)
mSet<-ImputeVar(mSet, method="min")
mSet<-FilterVariable(mSet, "iqr", "F", 25)
mSet<-PreparePrenormData(mSet)
mSet<-Normalization(mSet, "NULL", "NULL", "NULL", ratio=FALSE, ratioNum=20)
mSet<-PlotNormSummary(mSet, "norm_0_", "png", 72, width=NA)
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", "png", 72, width=NA)
mSet<-PLSR.Anal(mSet, reg=TRUE)
mSet<-PlotPLSPairSummary(mSet, "pls_pair_0_", "png", 72, width=NA, 5)
mSet<-PlotPLS2DScore(mSet, "pls_score2d_0_", "png", 72, width=NA, 1,2,0.95,0,0)
mSet<-PlotPLS3DScoreImg(mSet, "pls_score3d_0_", "png", 72, width=NA, 1,2,3, 40)
mSet<-PlotPLSLoading(mSet, "pls_loading_0_", "png", 72, width=NA, 1, 2);
mSet<-PlotPLS3DLoading(mSet, "pls_loading3d_0_", "json", 1,2,3)
mSet<-PLSDA.CV(mSet, "T",5, "Q2")
mSet<-PlotPLS.Classification(mSet, "pls_cv_0_", "png", 72, width=NA)
mSet<-PlotPLS.Imp(mSet, "pls_imp_0_", "png", 72, width=NA, "vip", "Comp. 1", 15,FALSE)
mSet<-SaveTransformedData(mSet)
setwd("~/Documents/Data Reproducibility/replication-project")
library(MetaboAnalystR)
mSet<-InitDataObjects("specbin", "stat", FALSE)
mSet<-Read.TextData(mSet, "data_processed.csv", "rowu", "disc");
mSet<-SanityCheckData(mSet)
library(MetaboAnalystR)
mSet<-InitDataObjects("specbin", "stat", FALSE)
mSet<-Read.TextData(mSet, "data_processed.csv", "rowu", "disc");
mSet<-SanityCheckData(mSet)
mSet<-RemoveMissingPercent(mSet, percent=0.5)
mSet<-ImputeVar(mSet, method="min")
mSet<-FilterVariable(mSet, "iqr", "F", 25)
mSet<-PreparePrenormData(mSet)
mSet<-Normalization(mSet, "NULL", "NULL", "NULL", ratio=FALSE, ratioNum=20)
mSet<-PlotNormSummary(mSet, "norm_0_", "png", 72, width=NA)
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", "png", 72, width=NA)
mSet<-PLSR.Anal(mSet, reg=TRUE)
mSet<-PlotPLSPairSummary(mSet, "pls_pair_0_", "png", 72, width=NA, 5)
mSet<-PlotPLS2DScore(mSet, "pls_score2d_0_", "png", 72, width=NA, 1,2,0.95,0,0)
mSet<-PlotPLS3DScoreImg(mSet, "pls_score3d_0_", "png", 72, width=NA, 1,2,3, 40)
mSet<-PlotPLSLoading(mSet, "pls_loading_0_", "png", 72, width=NA, 1, 2);
mSet<-PlotPLS3DLoading(mSet, "pls_loading3d_0_", "json", 1,2,3)
mSet<-PLSDA.CV(mSet, "T",5, "Q2")
mSet<-PlotPLS.Classification(mSet, "pls_cv_0_", "png", 72, width=NA)
mSet<-PlotPLS.Imp(mSet, "pls_imp_0_", "png", 72, width=NA, "vip", "Comp. 1", 15,FALSE)
mSet<-SaveTransformedData(mSet)
mSet$imgSet$pls.score3d
View(mSet$imgSet$pls.score3d)
mSet<-PreparePrenormData(mSet)
library(MetaboAnalystR)
mSet<-InitDataObjects("specbin", "stat", FALSE)
mSet<-Read.TextData(mSet, "data_processed.csv", "rowu", "disc");
mSet<-SanityCheckData(mSet)
mSet<-RemoveMissingPercent(mSet, percent=0.5)
mSet<-ImputeVar(mSet, method="min")
mSet<-FilterVariable(mSet, "iqr", "F", 25)
mSet<-PreparePrenormData(mSet)
mSet<-Normalization(mSet, "NULL", "NULL", "NULL", ratio=FALSE, ratioNum=20)
mSet<-PlotNormSummary(mSet, "norm_0_", "png", 72, width=NA)
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", "png", 72, width=NA)
mSet<-PLSR.Anal(mSet, reg=TRUE)
mSet<-PlotPLSPairSummary(mSet, "pls_pair_0_", "png", 72, width=NA, 5)
mSet<-PlotPLS2DScore(mSet, "pls_score2d_0_", "png", 72, width=NA, 1,2,0.95,0,0)
mSet<-PlotPLS3DScoreImg(mSet, "pls_score3d_0_", "png", 72, width=NA, 1,2,3, 40)
mSet<-PlotPLSLoading(mSet, "pls_loading_0_", "png", 72, width=NA, 1, 2);
mSet<-PlotPLS3DLoading(mSet, "pls_loading3d_0_", "json", 1,2,3)
mSet<-PLSDA.CV(mSet, "T",5, "Q2")
mSet<-PlotPLS.Classification(mSet, "pls_cv_0_", "png", 72, width=NA)
mSet<-PlotPLS.Imp(mSet, "pls_imp_0_", "png", 72, width=NA, "vip", "Comp. 1", 15,FALSE)
mSet<-SaveTransformedData(mSet)
View(mSet$imgSet$pls.score3d)
setwd("~/Documents/Data Reproducibility/replication-project/analysis")
library(MetaboAnalystR)
mSet<-InitDataObjects("specbin", "stat", FALSE)
mSet<-Read.TextData(mSet, "data_processed.csv", "rowu", "disc");
mSet<-SanityCheckData(mSet)
mSet<-RemoveMissingPercent(mSet, percent=0.5)
mSet<-ImputeVar(mSet, method="min")
mSet<-FilterVariable(mSet, "iqr", "F", 25)
mSet<-PreparePrenormData(mSet)
mSet<-Normalization(mSet, "NULL", "NULL", "NULL", ratio=FALSE, ratioNum=20)
mSet<-PlotNormSummary(mSet, "norm_0_", "png", 72, width=NA)
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", "png", 72, width=NA)
mSet<-PLSR.Anal(mSet, reg=TRUE)
mSet<-PlotPLSPairSummary(mSet, "pls_pair_0_", "png", 72, width=NA, 5)
mSet<-PlotPLS2DScore(mSet, "pls_score2d_0_", "png", 72, width=NA, 1,2,0.95,0,0)
mSet<-PlotPLS3DScoreImg(mSet, "pls_score3d_0_", "png", 72, width=NA, 1,2,3, 40)
mSet<-PlotPLSLoading(mSet, "pls_loading_0_", "png", 72, width=NA, 1, 2);
mSet<-PlotPLS3DLoading(mSet, "pls_loading3d_0_", "json", 1,2,3)
mSet<-PLSDA.CV(mSet, "T",5, "Q2")
mSet<-PlotPLS.Classification(mSet, "pls_cv_0_", "png", 72, width=NA)
mSet<-PlotPLS.Imp(mSet, "pls_imp_0_", "png", 72, width=NA, "vip", "Comp. 1", 15,FALSE)
mSet<-SaveTransformedData(mSet)
View(mSet$imgSet$pls.score3d)
read_chunk('PLSDA_code.R')
source("PLSDA_code.R")
source("PLSDA_code.R")
source("PLSDA_code.R")
source("PLSDA_code.R")
setwd("~/Documents/ReproProj")
source("analysis/PLSDA_code.R")
source("analysis/PLSDA_code.R")
source("/analysis/PLSDA_code.R")
library(here)
library(here)
source(here("analysis", "PLSDA_code.R"))
library(here)
source(here("analysis","script", "PLSDA_code.R"))
library(here)
source(here("analysis","script", "PLSDA_code.R"))
library(here)
source(here("analysis","script", "PLSDA_code.R"))
library(MetaboAnalystR)
mSet<-InitDataObjects("specbin", "stat", FALSE)
mSet<-Read.TextData(mSet, "data_processed.csv", "rowu", "disc");
mSet<-SanityCheckData(mSet)
mSet<-RemoveMissingPercent(mSet, percent=0.5)
mSet<-ImputeVar(mSet, method="min")
mSet<-FilterVariable(mSet, "iqr", "F", 25)
mSet<-PreparePrenormData(mSet)
mSet<-Normalization(mSet, "NULL", "NULL", "NULL", ratio=FALSE, ratioNum=20)
mSet<-PlotNormSummary(mSet, "norm_0_", "png", 72, width=NA)
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", "png", 72, width=NA)
mSet<-PLSR.Anal(mSet, reg=TRUE)
mSet<-PlotPLS3DScoreImg(mSet, "pls_score3d_0_", "png", 72, width=NA, 1,2,3, 40)
mSet<-PlotPLS3DLoading(mSet, "pls_loading3d_0_", "json", 1,2,3)
mSet<-PLSDA.CV(mSet, "T",5, "Q2")
mSet<-PlotPLS.Imp(mSet, "pls_imp_0_", "png", 72, width=NA, "vip", "Comp. 1", 15,FALSE)
mSet<-SaveTransformedData(mSet)
setwd("~/Documents/ReproProj")
mSet<-Read.TextData(mSet, "analysis/script/data_processed.csv", "rowu", "disc");
library(MetaboAnalystR)
mSet<-InitDataObjects("specbin", "stat", FALSE)
mSet<-Read.TextData(mSet, "analysis/script/data_processed.csv", "rowu", "disc");
mSet<-SanityCheckData(mSet)
mSet<-RemoveMissingPercent(mSet, percent=0.5)
mSet<-ImputeVar(mSet, method="min")
mSet<-FilterVariable(mSet, "iqr", "F", 25)
mSet<-PreparePrenormData(mSet)
mSet<-Normalization(mSet, "NULL", "NULL", "NULL", ratio=FALSE, ratioNum=20)
mSet<-PlotNormSummary(mSet, "norm_0_", "png", 72, width=NA)
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", "png", 72, width=NA)
mSet<-PLSR.Anal(mSet, reg=TRUE)
mSet<-PlotPLS3DScoreImg(mSet, "pls_score3d_0_", "png", 72, width=NA, 1,2,3, 40)
mSet<-PlotPLS3DLoading(mSet, "pls_loading3d_0_", "json", 1,2,3)
mSet<-PLSDA.CV(mSet, "T",5, "Q2")
mSet<-PlotPLS.Imp(mSet, "pls_imp_0_", "png", 72, width=NA, "vip", "Comp. 1", 15,FALSE)
mSet<-SaveTransformedData(mSet)
library(here)
source(here("analysis","script", "PLSDA_code.R"))
library(here)
source(here("analysis","script", "PLSDA_code.R"))
setwd("~/Documents/ReproProj")
library(here)
source(here("analysis","script", "PLSDA_code.R"))
library(here)
source(here("analysis","script", "PLSDA_code.R"))
usethis::use_github()
install.packages
install.packages("usethis")
usethis::use_github()
library(usethis)
install.package("git2r")
install.packages("git2r")
